using System;
using System.Collections.Generic;

using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Core;
using Microsoft.WindowsAzure.Storage.Table;

using Xamarin.Forms;
using System.Diagnostics;
using Microsoft.WindowsAzure.Storage.Auth;

namespace Teal
{
	public partial class Table : ContentPage
	{
		List<Tuple<string,int>> data = new List<Tuple<string, int>>();
		public Table ()
		{
			InitializeComponent ();

			list.ItemTemplate = new DataTemplate(typeof(TextCell));
			list.ItemTemplate.SetBinding(TextCell.TextProperty, "Item1");
			list.ItemTemplate.SetBinding(TextCell.DetailProperty, "Item2");
		}

		// TODO: this will need to be generated by you in the GenerateSharedAccessSignatures command line app
		string sas ="?sv=2014-02-14&tn=demotable1&spk=xander&epk=xander&sig=nDU7XnyN%2BAT%2BHBs281yy%2FBnOg5ntutdD62fzTUr8gys%3D&st=2015-05-05T22%3A14%3A02Z&se=2015-05-06T22%3A29%3A02Z&sp=raud";
		StorageUri tableStorageUri = new StorageUri(new Uri("https://FROM_PORTAL.table.core.windows.net/")); // from Azure portal

		protected override void OnAppearing ()
		{
			base.OnAppearing ();
		}

		async void Table_Clicked (object sender, EventArgs ea) {
			
			// Retrieve storage account information from connection string
			// How to create a storage connection string - http://msdn.microsoft.com/en-us/library/azure/ee758697.aspx
			CloudStorageAccount storageAccount = CreateStorageAccount ();
			CloudTableClient client = storageAccount.CreateCloudTableClient();
			CloudTable table = client.GetTableReference("demotable1");

			Debug.WriteLine (table.Name + " " + table.StorageUri.PrimaryUri);
			Debug.WriteLine ("isSAS:" + table.ServiceClient.Credentials.IsSAS);

			try
			{
				var exists = await table.ExistsAsync ();
				Debug.WriteLine ("exists; " + exists);

				var part = "xander";
				var row = DateTime.Now.Ticks.ToString ();

				DynamicTableEntity ent = new DynamicTableEntity() { PartitionKey = part, RowKey = row };
				ent.Properties.Add("EncryptedProp1", new EntityProperty(string.Empty));
				ent.Properties.Add("EncryptedProp2", new EntityProperty(textEntry.Text));
				ent.Properties.Add("NotEncryptedProp", new EntityProperty(Convert.ToInt32(intEntry.Text)));

				// Insert Entity
				Debug.WriteLine("Inserting the entity.");
				await table.ExecuteAsync(TableOperation.Insert(ent));

				// Retrieve Single Entity
//				Debug.WriteLine("Retrieving the entity.");
//				TableOperation operation = TableOperation.Retrieve(ent.PartitionKey, ent.RowKey);
//				TableResult result = await table.ExecuteAsync(operation);
//				Debug.WriteLine("tag: " + result.Etag);

				// Retrieve Entities
				//
				// http://azure.microsoft.com/en-us/documentation/articles/storage-dotnet-how-to-use-tables/#retrieve-all-entities-in-a-partition
				//
				data = new List<Tuple<string, int>>();
				// Initialize the continuation token to null to start from the beginning of the table
				TableContinuationToken continuationToken = null;

				TableQuery query = new TableQuery().Where(TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, "xander"));
				foreach (var entity in await table.ExecuteQuerySegmentedAsync(query, continuationToken))
				{
					try {
					data.Add(new Tuple<string, int> (entity.Properties["EncryptedProp2"].StringValue, entity.Properties["NotEncryptedProp"].Int32Value.Value));
					
					Debug.WriteLine("{0}, {1}\t{2}\t{3}", 
						entity.PartitionKey, 
						entity.RowKey,
						entity.Properties["EncryptedProp2"].StringValue, 
						entity.Properties["NotEncryptedProp"].Int32Value);
					} catch {Debug.WriteLine("invalid row");}
				}
				list.ItemsSource = data;

			}
			catch (Exception ex)
			{
				Debug.WriteLine ("error occurred " + ex);
			}
		}

		private CloudStorageAccount CreateStorageAccount()
		{
			CloudStorageAccount storageAccount;
			try
			{
				var creds = new StorageCredentials (sas);
				// storageAccount = CloudStorageAccount.Create (creds, null, null, tableStorageUri, null); // 4.4
				storageAccount = new CloudStorageAccount (creds, null, null, tableStorageUri, null); // 6.2.2
			}
			catch (FormatException)
			{
				Debug.WriteLine("Invalid storage account information provided. Please confirm the AccountName and AccountKey are valid in the app.config file - then restart the sample.");
				throw;
			}
			catch (ArgumentException)
			{
				Debug.WriteLine("Invalid storage account information provided. Please confirm the AccountName and AccountKey are valid in the app.config file - then restart the sample.");
				throw;
			}
			return storageAccount;
		}
	}
}

